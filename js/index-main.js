// js/index-main.js - ÂÆåÊï¥‰øÆÂæ©ÁâàÔºöÊï¥ÂêàÊâÄÊúâÂäüËÉΩ
class MainApp {
  constructor() {
    this.roomId = this.getRoomIdFromURL();
    this.firebaseReady = false;
    this.packingListLoaded = false;
    this.settings = {
      title: "Trip",
      subtitle: "2025",
      googleMapLinks: [],
      dateFrom: "2025-03-15T11:30",
      dateTo: "2025-03-16T15:00",
      schedule: [],
      packingItems: {}
    };

    this.init();
  }

  getRoomIdFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('room');
  }

  init() {
    console.log('üöÄ ‰∏ªÊáâÁî®Á®ãÂºèÂàùÂßãÂåñ‰∏≠...');
    this.setupBasicEventListeners();
    this.waitForFirebase();
  }

  waitForFirebase() {
    const checkFirebase = () => {
      if (typeof window.firebaseDB !== 'undefined') {
        console.log('üî• Firebase ÈÄ£Êé•ÊàêÂäüÔºÅ');
        this.firebaseReady = true;
        if (this.roomId) {
          this.setupRealtimeSettingsListener();
        } else {
          // Ê≤íÊúâÊàøÈñìIDÊôÇËºâÂÖ•È†êË®≠ÂÖßÂÆπ
          this.loadDefaultContent();
        }
        // Á¢∫‰øù Packing List ÂäüËÉΩËºâÂÖ•
        this.ensurePackingListFunctionality();
      } else {
        console.log('‚è≥ Á≠âÂæÖ Firebase...');
        setTimeout(checkFirebase, 500);
      }
    };
    checkFirebase();
  }

  // ================================
  // Firebase Ë®≠ÂÆöÁõ£ËÅΩ
  // ================================

  setupRealtimeSettingsListener() {
    if (!this.firebaseReady || !window.firebaseDB) return;

    try {
      // Áõ£ËÅΩÁÆ°ÁêÜÂæåÂè∞ÁöÑË®≠ÂÆöËÆäÊõ¥
      const settingsRef = window.firebaseRef(`rooms/${this.roomId}/app-settings`);
      
      window.firebaseOnValue(settingsRef, (snapshot) => {
        const data = snapshot.val();
        if (data) {
          console.log('üì• Êî∂Âà∞ÁÆ°ÁêÜÂæåÂè∞ÁöÑË®≠ÂÆöÊõ¥Êñ∞:', data);
          this.updateAppSettings(data);
          this.showNotification('È†ÅÈù¢ÂÖßÂÆπÂ∑≤Êõ¥Êñ∞');
        } else {
          // Ê≤íÊúâË®≠ÂÆöÊôÇËºâÂÖ•È†êË®≠ÂÖßÂÆπ
          this.loadDefaultContent();
        }
      });

      console.log('üëÇ Â∑≤Ë®≠ÁΩÆÂç≥ÊôÇË®≠ÂÆöÁõ£ËÅΩÂô®');
      
    } catch (error) {
      console.error('‚ùå Ë®≠ÁΩÆË®≠ÂÆöÁõ£ËÅΩÂô®Â§±Êïó:', error);
      this.loadDefaultContent();
    }
  }

  updateAppSettings(newSettings) {
    // Êõ¥Êñ∞Êú¨Âú∞Ë®≠ÂÆö
    this.settings = { ...this.settings, ...newSettings };

    // Êõ¥Êñ∞È†ÅÈù¢ÂÖßÂÆπ
    this.updatePageContent();
    
    // Êõ¥Êñ∞ÂÄíÊï∏Ë®àÊôÇ
    this.updateCountdown();
  }

  updatePageContent() {
    // Êõ¥Êñ∞Ê®ôÈ°å
    const titleEl = document.querySelector('.title');
    const yearEl = document.querySelector('.year');
    
    if (titleEl && this.settings.title) {
      titleEl.textContent = this.settings.title;
    }
    
    if (yearEl && this.settings.subtitle) {
      yearEl.textContent = this.settings.subtitle;
    }

    // Êõ¥Êñ∞ Google Map Links
    this.updateGoogleMapLinks();
    
    // Êõ¥Êñ∞Êó•ÊúüÈ°ØÁ§∫
    this.updateDateDisplay();
    
    // Êõ¥Êñ∞Ë°åÁ®ã
    this.updateScheduleDisplay();

    console.log('‚úÖ È†ÅÈù¢ÂÖßÂÆπÂ∑≤Êõ¥Êñ∞');
  }

  updateGoogleMapLinks() {
    const quickLinksEl = document.getElementById('quick-links');
    if (!quickLinksEl) return;

    // Ê∏ÖÁ©∫ÁèæÊúâÈÄ£Áµê
    quickLinksEl.innerHTML = '';

    // Ê∑ªÂä†ÂàÜ‰∫´ÊåâÈàïÔºàÊ∞∏ÈÅ†‰øùÁïôÔºâ
    const shareBtn = document.createElement('button');
    shareBtn.className = 'link-btn';
    shareBtn.id = 'share-btn';
    shareBtn.innerHTML = 'üì§ ÂàÜ‰∫´Ê¥ªÂãï';
    quickLinksEl.appendChild(shareBtn);

    // ÈáçÊñ∞Á∂ÅÂÆöÂàÜ‰∫´ÊåâÈàï‰∫ã‰ª∂
    this.setupShareButton();

    // Ê∑ªÂä† Google Map ÈÄ£ÁµêÔºàÂéªÈô§ÂúñÊ®ôÔºâ
    if (this.settings.googleMapLinks && this.settings.googleMapLinks.length > 0) {
      this.settings.googleMapLinks.forEach(link => {
        if (link.destination && link.url) {
          const linkBtn = document.createElement('a');
          linkBtn.className = 'link-btn';
          linkBtn.href = link.url;
          linkBtn.target = '_blank';
          linkBtn.textContent = link.destination; // ÂéªÈô§ÂúñÊ®ôÔºåÂè™È°ØÁ§∫ÊñáÂ≠ó
          quickLinksEl.appendChild(linkBtn);
        }
      });
    }

    console.log('‚úÖ Google Map Links Â∑≤Êõ¥Êñ∞');
  }

  updateDateDisplay() {
    const countdownDateEl = document.getElementById('countdown-date');
    if (!countdownDateEl) return;

    if (this.settings.dateFrom) {
      try {
        const fromDate = new Date(this.settings.dateFrom);
        const toDate = new Date(this.settings.dateTo || this.settings.dateFrom);
        const isSameDay = fromDate.toDateString() === toDate.toDateString();
        
        if (isSameDay) {
          countdownDateEl.textContent = fromDate.toLocaleDateString('en-US', { 
            month: 'long', 
            day: 'numeric', 
            year: 'numeric' 
          });
        } else {
          const fromStr = fromDate.toLocaleDateString('en-US', { 
            month: 'long', 
            day: 'numeric' 
          });
          const toStr = toDate.toLocaleDateString('en-US', { 
            month: 'long', 
            day: 'numeric', 
            year: 'numeric' 
          });
          countdownDateEl.textContent = `${fromStr} - ${toStr}`;
        }
      } catch (error) {
        console.error('Êó•ÊúüÊ†ºÂºèÈåØË™§:', error);
      }
    }
  }

  updateScheduleDisplay() {
    const scheduleContentEl = document.getElementById('schedule-content');
    if (!scheduleContentEl) return;

    if (this.settings.schedule && this.settings.schedule.length > 0) {
      let scheduleHTML = '';
      
      this.settings.schedule.forEach(day => {
        if (day.activities && day.activities.length > 0) {
          day.activities.forEach(activity => {
            scheduleHTML += `
              <div class="schedule-item">
                <div class="schedule-time">${activity.time}</div>
                <div class="schedule-activity">${activity.activity}</div>
              </div>
            `;
          });
        }
      });

      scheduleContentEl.innerHTML = scheduleHTML || '<div class="empty-state">No Schedule yet</div>';
    } else {
      scheduleContentEl.innerHTML = '<div class="empty-state">No Schedule yet</div>';
    }

    console.log('‚úÖ Schedule Â∑≤Êõ¥Êñ∞');
  }

  updateCountdown() {
    // ÈáçÊñ∞Ë®≠ÁΩÆÂÄíÊï∏Ë®àÊôÇÁõÆÊ®ô
    if (this.settings.dateFrom) {
      const newTargetDate = new Date(this.settings.dateFrom).getTime();
      
      // Â¶ÇÊûúÊúâÂÖ®ÂüüÁöÑÂÄíÊï∏Ë®àÊôÇÂáΩÊï∏ÔºåÊõ¥Êñ∞ÁõÆÊ®ôÊôÇÈñì
      if (window.updateCountdownTarget) {
        window.updateCountdownTarget(newTargetDate);
      }
    }
  }

  // ================================
  // Á¢∫‰øù Packing List ÂäüËÉΩËºâÂÖ•
  // ================================

  ensurePackingListFunctionality() {
    // Ê™¢Êü•ÊòØÂê¶ÈúÄË¶ÅÈáçÊñ∞ÂàùÂßãÂåñ packing list
    if (!window.packingListLoaded && !this.packingListLoaded) {
      console.log('üì¶ ÂàùÂßãÂåñ Packing List ÂäüËÉΩ...');
      this.packingListLoaded = true;
      window.packingListLoaded = true;
      
      // Ë®≠ÁΩÆ‰∏ÄÂÄãÂ∞èÂª∂ÈÅ≤Á¢∫‰øùÊâÄÊúâËÖ≥Êú¨ÈÉΩËºâÂÖ•ÂÆåÊàê
      setTimeout(() => {
        this.initializePackingList();
      }, 1000);
    }
  }

  initializePackingList() {
    console.log('üìã Ë®≠ÁΩÆ Packing List ÂäüËÉΩ...');
    
    // Â¶ÇÊûú script.js ‰∏≠ÁöÑÂäüËÉΩÈÇÑÊ≤íËºâÂÖ•ÔºåËºâÂÖ•È†êË®≠È†ÖÁõÆ
    if (!window.packingInitialized) {
      this.loadDefaultPackingItems();
    }
  }

  loadDefaultPackingItems() {
    console.log('üì¶ ÂàùÂßãÂåñÁ©∫ÁöÑ Packing List...');
    
    // ‰∏çËºâÂÖ•È†êË®≠È†ÖÁõÆÔºå‰øùÊåÅÁ©∫ÁãÄÊÖã
    const emptyPackingData = {
      "shared-items": [],
      "personal-items": []
    };

    // Â¶ÇÊûúÊúâÂèØÁî®ÁöÑÊ∏≤ÊüìÂáΩÊï∏Ôºå‰ΩøÁî®ÂÆÉ
    if (typeof window.renderItemsFromFirebase === 'function') {
      window.renderItemsFromFirebase(emptyPackingData);
    } else {
      // ÊâãÂãïÊ∏≤ÊüìÁ©∫È†ÖÁõÆ
      this.renderPackingItems(emptyPackingData);
    }
    
    // ÂàùÂßãÂåñÂü∫Êú¨ÁöÑ‰∫∫Âì°ÁØ©ÈÅ∏ÊåâÈàï
    this.createPersonFilters(emptyPackingData);
  }

  renderPackingItems(data) {
    console.log('üé® ÊâãÂãïÊ∏≤Êüì Packing List È†ÖÁõÆ');
    
    // Ê∏≤ÊüìÂà∞ÂêÑËá™ÁöÑÂàóË°®
    for (const categoryId in data) {
      const list = document.getElementById(categoryId);
      if (list && data[categoryId] && Array.isArray(data[categoryId])) {
        list.innerHTML = '';
        data[categoryId].forEach(item => {
          this.createItemElement(list, item);
        });
      }
    }
    
    // ÂâµÂª∫‰∫∫Âì°ÁØ©ÈÅ∏ÊåâÈàï
    this.createPersonFilters(data);
  }

  createItemElement(list, item) {
    const li = document.createElement('li');
    li.className = 'item';
    li.dataset.person = item.personData || item.persons;

    // Checkbox ÂÆπÂô®
    const customCheckbox = document.createElement('div');
    customCheckbox.className = 'custom-checkbox';

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.id = item.id;

    const checkboxLabel = document.createElement('label');
    checkboxLabel.className = 'checkbox-label';
    checkboxLabel.setAttribute('for', item.id);

    customCheckbox.appendChild(checkbox);
    customCheckbox.appendChild(checkboxLabel);
    li.appendChild(customCheckbox);

    // È†ÖÁõÆÊ®ôÁ±§
    const itemLabel = document.createElement('label');
    itemLabel.className = 'item-label';
    itemLabel.setAttribute('for', item.id);

    const nameSpan = document.createElement('span');
    nameSpan.className = 'item-name';
    nameSpan.textContent = item.name;
    itemLabel.appendChild(nameSpan);

    if (item.quantity) {
      const quantitySpan = document.createElement('span');
      quantitySpan.className = 'item-quantity';
      quantitySpan.textContent = `x${item.quantity}`;
      itemLabel.appendChild(quantitySpan);
    }

    // Ë≤†Ë≤¨‰∫∫Ê®ôÁ±§
    const personTags = document.createElement('span');
    personTags.className = 'person-tags';

    if (item.persons) {
      const personsList = item.persons.split(',');
      personsList.forEach(person => {
        if (person.trim()) {
          const personTag = document.createElement('span');
          personTag.className = 'person-tag';
          personTag.textContent = person.trim();
          personTags.appendChild(personTag);
        }
      });
    }
    itemLabel.appendChild(personTags);

    li.appendChild(itemLabel);
    list.appendChild(li);
  }

  createPersonFilters(data) {
    const personFilter = document.getElementById('person-filter');
    if (!personFilter) return;

    const allPersons = new Set(['All']);

    // Êî∂ÈõÜÊâÄÊúâ‰∫∫Âì°
    Object.values(data).forEach(categoryItems => {
      if (Array.isArray(categoryItems)) {
        categoryItems.forEach(item => {
          if (item.persons) {
            const persons = item.persons.split(',').map(p => p.trim());
            persons.forEach(person => {
              if (person && person !== 'All') {
                allPersons.add(person);
              }
            });
          }
        });
      }
    });

    // Ê∏ÖÁ©∫‰∏¶ÈáçÊñ∞ÂâµÂª∫ÁØ©ÈÅ∏ÊåâÈàï
    personFilter.innerHTML = '';
    
    const allButton = document.createElement('button');
    allButton.className = 'filter-btn active';
    allButton.dataset.person = 'all';
    allButton.textContent = 'All';
    personFilter.appendChild(allButton);

    // ÊåâÂ≠óÊØçÈ†ÜÂ∫èÊéíÂ∫èÂÖ∂‰ªñ‰∫∫Âì°
    const sortedPersons = Array.from(allPersons).filter(p => p !== 'All').sort();
    
    sortedPersons.forEach(person => {
      const button = document.createElement('button');
      button.className = 'filter-btn';
      button.textContent = person;
      button.dataset.person = person;
      personFilter.appendChild(button);
    });

    // Ë®≠ÁΩÆÁØ©ÈÅ∏ÂäüËÉΩÔºàÁ∞°ÂåñÁâàÔºâ
    personFilter.addEventListener('click', (e) => {
      if (e.target.classList.contains('filter-btn')) {
        // ÁßªÈô§ÊâÄÊúâ active È°ûÂà•
        personFilter.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
        // Ê∑ªÂä†Âà∞Áï∂ÂâçÈªûÊìäÁöÑÊåâÈàï
        e.target.classList.add('active');
        
        const selectedPerson = e.target.dataset.person;
        this.filterItems(selectedPerson);
      }
    });
  }

  filterItems(person) {
    const items = document.querySelectorAll('.item');

    items.forEach(item => {
      if (person === 'all') {
        item.style.display = '';
      } else {
        const itemPersons = item.dataset.person ? item.dataset.person.split(',').map(p => p.trim()) : [];
        
        if (itemPersons.includes(person) || itemPersons.includes('All')) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      }
    });
  }

  // ================================
  // ËºâÂÖ•È†êË®≠ÂÖßÂÆπ
  // ================================

  loadDefaultContent() {
    console.log('üìã ËºâÂÖ•È†êË®≠ÂÖßÂÆπ');
    
    // ËºâÂÖ•È†êË®≠ÁöÑ Google Map LinksÔºàÂéªÈô§ÂúñÊ®ôÔºâ
    this.settings.googleMapLinks = [
      { destination: "Camping Gear Rental", url: "https://maps.app.goo.gl/17ijdqNEz8eBcPr39" },
      { destination: "Campground", url: "https://maps.app.goo.gl/qcHmgWCcvEGAaVCQ6" }
    ];

    // ËºâÂÖ•È†êË®≠ Schedule
    this.settings.schedule = [
      {
        day: "Day1",
        activities: [
          { time: "11:20", activity: "Meet up" },
          { time: "13:20", activity: "Lunch" },
          { time: "13:50", activity: "Shop for food at PX Mart" },
          { time: "15:00", activity: "Campground check-in" }
        ]
      }
    ];

    // Êõ¥Êñ∞È†ÅÈù¢ÂÖßÂÆπ
    this.updatePageContent();
  }

  // ================================
  // Âü∫Êú¨‰∫ã‰ª∂Áõ£ËÅΩÂô®
  // ================================

  setupBasicEventListeners() {
    this.setupAdminButton();
    this.setupShareButton();
  }

  setupAdminButton() {
    const adminBtn = document.getElementById('admin-btn');
    if (adminBtn) {
      adminBtn.addEventListener('click', () => {
        let roomId = this.roomId;
        
        if (!roomId) {
          roomId = 'room-' + Date.now();
          // Êõ¥Êñ∞Áï∂ÂâçÈ†ÅÈù¢ÁöÑURLÔºåÂä†ÂÖ•ÊàøÈñìID
          const newUrl = new URL(window.location);
          newUrl.searchParams.set('room', roomId);
          window.history.replaceState({}, '', newUrl);
          this.roomId = roomId;
          
          // Â¶ÇÊûú Firebase Â∑≤Ê∫ñÂÇôÂ•ΩÔºåË®≠ÁΩÆÁõ£ËÅΩÂô®
          if (this.firebaseReady) {
            this.setupRealtimeSettingsListener();
          }
        }
        
        // Ë∑≥ËΩâÂà∞ÁÆ°ÁêÜÈ†ÅÈù¢
        window.location.href = `admin.html?room=${roomId}`;
      });
    }
  }

  setupShareButton() {
    const shareBtn = document.getElementById('share-btn');
    if (shareBtn) {
      // ÁßªÈô§ËàäÁöÑ‰∫ã‰ª∂Áõ£ËÅΩÂô®
      const newShareBtn = shareBtn.cloneNode(true);
      shareBtn.parentNode.replaceChild(newShareBtn, shareBtn);
      
      newShareBtn.addEventListener('click', () => {
        let roomId = this.roomId;
        
        if (!roomId) {
          roomId = 'room-' + Date.now();
          const newUrl = new URL(window.location);
          newUrl.searchParams.set('room', roomId);
          window.history.replaceState({}, '', newUrl);
          this.roomId = roomId;
          
          // Â¶ÇÊûú Firebase Â∑≤Ê∫ñÂÇôÂ•ΩÔºåË®≠ÁΩÆÁõ£ËÅΩÂô®
          if (this.firebaseReady) {
            this.setupRealtimeSettingsListener();
          }
        }
        
        const shareLink = `${window.location.origin}${window.location.pathname}?room=${roomId}`;
        
        if (navigator.clipboard) {
          navigator.clipboard.writeText(shareLink).then(() => {
            this.showNotification('ÂàÜ‰∫´ÈÄ£ÁµêÂ∑≤Ë§áË£ΩÂà∞Ââ™Ë≤ºÊùø');
          }).catch(err => {
            this.fallbackCopyTextToClipboard(shareLink, 'ÂàÜ‰∫´ÈÄ£ÁµêÂ∑≤Ë§áË£Ω');
          });
        } else {
          this.fallbackCopyTextToClipboard(shareLink, 'ÂàÜ‰∫´ÈÄ£ÁµêÂ∑≤Ë§áË£Ω');
        }
      });
    }
  }

  // ================================
  // Â∑•ÂÖ∑ÂáΩÊï∏
  // ================================

  fallbackCopyTextToClipboard(text, successMessage) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
      const successful = document.execCommand('copy');
      if (successful) {
        this.showNotification(successMessage);
      } else {
        this.showLinkAlert(text);
      }
    } catch (err) {
      console.error('Ë§áË£ΩÂ§±Êïó:', err);
      this.showLinkAlert(text);
    }
    
    document.body.removeChild(textArea);
  }

  showLinkAlert(link) {
    alert(`Ë´ãÊâãÂãïË§áË£ΩÊ≠§ÈÄ£Áµê:\n\n${link}`);
  }

  showNotification(message, type = 'success') {
    // ÁßªÈô§ÁèæÊúâÈÄöÁü•
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
      existingNotification.remove();
    }

    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    const bgColor = type === 'error' ? '#dc3545' : '#4CAF50';
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${bgColor};
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      z-index: 1000;
      font-size: 14px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      max-width: 350px;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 3000);
  }
}

// ÂÖ®Âüü‰∏ªÊáâÁî®Á®ãÂºèÂØ¶‰æã
let mainApp;

// DOM ËºâÂÖ•ÂÆåÊàêÂæåÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', function() {
  console.log('üéØ DOM ËºâÂÖ•ÂÆåÊàêÔºåÂàùÂßãÂåñ‰∏ªÊáâÁî®Á®ãÂºè...');
  mainApp = new MainApp();
});

// Á≠âÂæÖ Firebase Ê∫ñÂÇôÂÆåÊàê
window.addEventListener('firebaseReady', function() {
  console.log('üî• Firebase Â∑≤Ê∫ñÂÇôÂÆåÊàê');
  if (!mainApp) {
    mainApp = new MainApp();
  }
});

console.log('üì¶ Complete Main App Ê®°ÁµÑËºâÂÖ•ÂÆåÊàê');
